@page "/documents"
@inject DocumentApiService DocumentService
@inject IConfiguration Configuration
@attribute [StreamRendering(true)]

<PageTitle>Documents</PageTitle>

<h1>Documents</h1>

<p>Here are some of our amazing documents that you can check.</p>

@if (documents == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Document</th>
                <th>Description</th>
                <th>Markdown</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in documents)
            {
                <tr>
                    <td>
                        <a href="@doc.FileBlobUri" target="_blank">@doc.FileName</a>
                        <div style="font-size: smaller;">
                            <div>Content Type: @doc.FileContentType</div>
                            <div>Created At: @doc.CreatedAt</div>
                            <div>Updated At: @doc.UpdatedAt</div>
                            <div>Chunks: @doc.Chunks</div>
                        </div>
                    </td>
                    <td>@doc.FileDescription</td>
                    <td>
                        <div style="font-size: smaller;">
                            @(doc.FileMarkDown.Length > 200 ? doc.FileMarkDown.Substring(0, 200) + "..." : doc.FileMarkDown)
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Document>? documents;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        documents = await DocumentService.GetDocumentsAsync();
    }
}
